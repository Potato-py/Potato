#!/usr/bin/python
# -*- coding:utf-8

#引用对象需添加以下code：
#------------------------appendPath------------------------
#自定义目录使用sys.path.append(sys.path[0]+r'../common')
#上层目录使用sys.path.append('..')
#当前目录下可忽略添加环境地址
#--------------------------import--------------------------
#from common.font import *
#-------防止高频调用导致堵塞，可对某些字段进行存储---------
#Processing=str(Processing())
#Information=str(Information())
#Detected=str(Detected())
#Result=str(Result())
#Error=str(Error())

import os
import sys

try:
    import terminal
except:
    print('检测出您未安装terminal模块，将替您安装此模块，请稍候……')
    os.system('pip install terminal')
    import terminal
try:
    import console
except:
    print('检测出您未安装console模块，将替您安装此模块，请稍候……')
    os.system('pip install console')
    import console

def red(text):
    return terminal.bold(terminal.red(text))

def green(text):
    return terminal.green(text)

def blue(text):
    return terminal.bold(terminal.blue(text))

def magenta(text):
    return terminal.magenta(text)

def yellow(text):
    return terminal.yellow(text)

def cyan(text):
    return terminal.cyan(text)

def bold(text):#高亮
    return terminal.bold(text)

def Processing():
    return terminal.magenta(r"[Processing] ")

def Information():
    return terminal.cyan(r"[Information] ")

def Detected():
    return terminal.bold(terminal.blue(r"[Detected] "))

def Result():
    return terminal.bold(terminal.green(r"[Result] "))

def Error():
    return terminal.bold(terminal.red(r"[Error] "))

def Input():
    return terminal.bold(terminal.yellow(r"<Potato>$ "))

def logo_1():
    os.system("cls")#Linux使用clear
    print ('')
    print ('''\033[1m

############################################################################################
##                           \033[0m'''+'''\033[1;31m    ___       ___       ___       ___       ___       ___    \033[0m'''+'''\033[1m##
##  --ScriptName: potato     \033[0m'''+'''\033[1;31m   /\  \     /\  \     /\  \     /\  \     /\  \     /\  \   \033[0m'''+'''\033[1m##
##  --Author    : LiJunYi    \033[0m'''+'''\033[1;31m  /::\  \   /::\  \    \:\  \   /::\  \    \:\  \   /::\  \  \033[0m'''+'''\033[1m##
##  --QQ        : 2438325121 \033[0m'''+'''\033[1;34m /:\033[0m'''+'''\033[1;31m:\:\__\ \033[0m'''+'''\033[1;34m/:\033[0m'''+'''\033[1;31m/\:\__\   /::\__\ \033[0m'''+'''\033[1;34m/:\033[0m'''+'''\033[1;31m:\:\__\   /::\__\ \033[0m'''+'''\033[1;34m/:\033[0m'''+'''\033[1;31m/\:\__\ \033[0m'''+'''\033[1m##
##  --Type      : Penetration\033[0m'''+'''\033[1;34m \/\\\033[0m'''+'''\033[1;31m::/  / \033[0m'''+'''\033[1;34m\:\\\033[0m'''+'''\033[1;31m/:/  /  \033[0m'''+'''\033[1;34m/:\033[0m'''+'''\033[1;31m/\/__/ \033[0m'''+'''\033[1;34m\/\\\033[0m'''+'''\033[1;31m::/  /  \033[0m'''+'''\033[1;34m/:\033[0m'''+'''\033[1;31m/\/__/ \033[0m'''+'''\033[1;34m\:\\\033[0m'''+'''\033[1;31m/:/  / \033[0m'''+'''\033[1m##
##  --Version   : 0.2.4      \033[0m'''+'''\033[1;34m    \\\033[0m'''+'''\033[1;31m/__/   \033[0m'''+'''\033[1;34m\::\033[0m'''+'''\033[1;31m/  /   \033[0m'''+'''\033[1;34m\/__/      /:\033[0m'''+'''\033[1;31m/  /   \033[0m'''+'''\033[1;34m\/__/     \::\033[0m'''+'''\033[1;31m/  /  \033[0m'''+'''\033[1m##
##                           \033[0m'''+'''\033[1;34m             \/__/               \/__/               \/__/   \033[0m'''+'''\033[1m##
############################################################################################

\033[0m''')
def describe():
    print ('''\033[1m
+-----------------------------------------------------------------------+
|                      Potato的常见用法以及相关信息                     |
+-----------------------------------------------------------------------+
|                                                                       |
|   本工具是用于进行全自动化的渗透测试脚本。此外扩充了代码审计、日志审计|
|等功能脚本。                                                           |
|   通过Fofa的API接口、CMS指纹扫描、NMAP、目录爆破等方式来采集目标信息；|
|   使用本地的Nexpose及自备脚本进行漏扫；                               |
|   最后通过调用MetaSploit及其他脚本辅助完成后渗透。                    |
|                                                                       |
+------------------+----------------------------------------------------+
|   功能选项       |                    功能说明                        |
+------------------+----------------------------------------------------+
|1. 使用帮助       | 展示本页帮助信息。                                 |
|2. 信息收集       | 通过Fofa进行信息收集并汇总表格                     |
|3. 采集主机       | 打印出已采集的主机列表                             |
|4. 开始攻击       | 配置任务并开始攻击                                 |
|5. 退出程序       | 退出Potato.                                        |
+------------------+----------------------------------------------------+
|                               免责声明                                |
+-----------------------------------------------------------------------+
|*****************程序仅供技术交流使用，请勿非法使用！******************|
|******************一切非法使用造成的后果于本人无关！*******************|
+-----------------------------------------------------------------------+
\033[0m''')

def logo_2():
    print(red('''
                     __        __      
        ____  ____ _/ /_____ _/ /_____ 
       / __ \/ __ `/ __/ __ `/ __/ __ \ 
      / /_/ / /_/ / /_/ /_/ / /_/ /_/ / ''')+blue(''' 
     / .___/\____/\__/\__,_/\__/\____/ 
    /_/  
'''))